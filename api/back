# WebSocket连接管理器
class ConnectionManager:
    def __init__(self):
        # 存储活跃的WebSocket连接
        self.active_connections: Dict[str, WebSocket] = {}

    async def connect(self, websocket: WebSocket, client_id: str):
        try:
            await websocket.accept()
            self.active_connections[client_id] = websocket
        except Exception as e:
            logger.error(f"Error accepting WebSocket connection for client {client_id}: {e}")
            await websocket.close(code=1006)

    async def disconnect(self, client_id: str):
        try:
            if client_id in self.active_connections:
                ws = self.active_connections[client_id]
                del self.active_connections[client_id]  # 先移除连接
                try:
                    await ws.close(code=1000)  # 使用1000表示正常关闭
                except Exception as e:
                    logger.error(f"Error closing WebSocket for client {client_id}: {e}")
            else:
                logger.error(f"Client {client_id} not found in active connections")
        except Exception as e:
            logger.error(f"Error in disconnect for client {client_id}: {e}")

    async def send_message(self, client_id: str, json_data: Dict):
        try:
            if client_id in self.active_connections:
                if self.active_connections[client_id].client_state == WebSocketState.CONNECTED:
                    await self.active_connections[client_id].send_json(json_data)
                else:
                    logger.error(f"Client {client_id} is not connected")
            else:
                logger.error(f"Client {client_id} not found in active connections")
        except Exception as e:
            logger.error(f"Error sending message to client {client_id}: {e}")

connection_manager = ConnectionManager()


@app.websocket("/ws/generate_music/{client_id}")
async def websocket_generate_music(websocket: WebSocket, client_id: str):
    try:
        # --------------------------------- 限流检测 ---------------------------------
        if not await global_semaphore.acquire():
            try:
                await websocket.accept()
                # 如果无法获取锁，发送忙碌消息并关闭连接
                await websocket.send_json({
                    "event": "error",
                    "message": "服务器正忙，当前正在处理任务，请稍后重试"
                })
            finally:
                await websocket.close(code=1006)
            return

        # ------------------------- 开始处理音乐生成 -------------------------
        try:
            # 将连接添加到管理器
            await connection_manager.connect(websocket, client_id)

            # 创建一个异步的进度回调函数
            async def async_progress_callback(percentage: float):
                json_data = {
                    "event": "generating",
                    "progress": percentage
                }
                await connection_manager.send_message(client_id, json_data)

            # 获取当前事件循环的引用
            loop = asyncio.get_running_loop()
            
            # 创建一个同步的包装器来调用异步回调
            def sync_progress_wrapper(percentage: float):
                future = asyncio.run_coroutine_threadsafe(
                    async_progress_callback(percentage),
                    loop
                )
                future.result(timeout=0.1)

            while True:
                # 等待接收消息
                data = await websocket.receive_json()
                
                # 发送开始事件
                await connection_manager.send_message(client_id, {
                    "event": "start"
                })
                
                # 在单独的线程中运行音乐生成
                audio_data = await asyncio.to_thread(
                    music_controller.generate_music_with_progress,
                    params=data,
                    progress_callback=sync_progress_wrapper
                )

                # 发送完成事件
                await connection_manager.send_message(client_id, {
                    "event": "completed",
                    "audio_data": audio_data
                })
                break

        except WebSocketDisconnect:
            logger.info(f"WebSocket disconnected for client {client_id}")
        except Exception as e:
            logger.error(f"Error in music generation for client {client_id}: {e}")
            try:
                await connection_manager.send_message(client_id, {
                    "event": "error",
                    "message": "音乐生成过程中发生错误"
                })
            except:
                pass

    except Exception as e:
        logger.error(f"Error in WebSocket connection setup for client {client_id}: {e}")
    finally:
        # 确保连接被清理
        await connection_manager.disconnect(client_id)
        # 释放信号量
        global_semaphore.release()
        logger.info(f"WebSocket connection closed for client {client_id}")